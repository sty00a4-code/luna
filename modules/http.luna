let http = {}
http.request_type = {
	get = "GET",
	head = "HEAD",
	post = "POST",
	put = "PUT",
	delete = "DELETE",
	connect = "CONNECT",
	options = "OPTIONS",
	trace = "TRACE",
	patch = "PATCH",
}
http.response_type = {
	_continue = 100,
	switching_protocols = 101,
	ok = 200,
	created = 201,
	accepted = 202,
	non_authoritative_information = 203,
	no_content = 204,
	reset_content = 205,
	partial_content = 206,
	multiple_choices = 300,
	moved_permanently = 301,
	found = 302,
	see_other = 303,
	not_modified = 304,
	use_proxy = 305,
	temporary_redirect = 307,
	bad_request = 400,
	unauthorized = 401,
	payment_required = 402,
	forbidden = 403,
	not_found = 404,
	method_not_allowed = 405,
	not_acceptable = 406,
	proxy_authentication_required = 407,
	request_timeout = 408,
	conflict = 409,
	gone = 410,
	length_required = 411,
	precondition_failed = 412,
	payload_too_large = 413,
	uri_too_long = 414,
	unsupported_media_type = 415,
	range_not_satisfiable = 416,
	expectation_failed = 417,
	upgrade_required = 426,
	internal_server_error = 500,
	not_implemented = 501,
	bad_gateway = 502,
	service_unavailable = 503,
	gateway_timeout = 504,
	http_version_not_supported = 505,
	network_authentication_required = 511,
}
http.Request = {
	mt = {
		__name = "request",
		__str = fn (self) {
			let headers = ""
			for key in keys(self.headers) {
				headers += "%s: %s\r\n":format(key, self.headers[key])
			}
			return "%s %s HTTP/1.1\r\n%s\r\n%s":format(self.type, self.path, headers, self.body)
		}
	}
}
fn http.Request.new(type, path, headers, body) {
	if http.request_type[type] {
		type = http.request_type[type]
	}
	return setmeta({
		type = type,
		path = path,
		headers = headers,
		body = body
	}, http.Request.mt)
}
fn http.Request.from_str(string) {
	let idx = 0
	let type = ""
	while string[idx] != ' ' {
		type += string[idx]
		idx += 1
	}
	idx += 1
	let path = ""
	while string[idx] != ' ' {
		path += string[idx]
		idx += 1
	}
	while string[idx] != '\r' {
		idx += 1
	}
	idx += 2
	let headers = {}
	let body

	return http.Request.new(type, path, headers, body)
}
http.Response = {
	mt = {
		__name = "response",
		__str = fn (self) {
			let headers = ""
			for key in keys(self.headers) {
				headers += "%s: %s\r\n":format(key, self.headers[key])
			}
			return "HTTP/1.1 %s\r\n%s\r\n%s":format(self.code, headers, self.body)
		}
	}
}
fn http.Response.new(code, headers, body) {
	if type(code) == "string" {
		code = http.response_type[code]
	}
	return setmeta({
		code = code,
		headers = headers,
		body = body,
	}, http.Response.mt)
}
return http
