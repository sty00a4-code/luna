{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Luna A light weight scripting language for quick and easy coding. It is very easy to embed in Rust programs with the luna-lib crate. Documentation Home Getting Started: Installation Environment Guide: Grammar Statements Expressions Variables Functions Standard Modules: Globals Type Modules: Int Module Float Module Bool Module Char Module String Module Vector Module Object Module Math IO FS Env Net OS Typed","title":"Home"},{"location":"#luna","text":"A light weight scripting language for quick and easy coding. It is very easy to embed in Rust programs with the luna-lib crate.","title":"Luna"},{"location":"#documentation","text":"Home Getting Started: Installation Environment Guide: Grammar Statements Expressions Variables Functions Standard Modules: Globals Type Modules: Int Module Float Module Bool Module Char Module String Module Vector Module Object Module Math IO FS Env Net OS Typed","title":"Documentation"},{"location":"getting_started/environment/","text":"Environment If you want to add additional functionality onto Luna you can use the LUNA_PATH environment variable that the Luna interpreter is using to locate modules if not found in the current directory. The environment variable should look something like this: ~/.luna or if you want it for all users /.luna . Of course you first have to create that directory.","title":"Environment"},{"location":"getting_started/environment/#environment","text":"If you want to add additional functionality onto Luna you can use the LUNA_PATH environment variable that the Luna interpreter is using to locate modules if not found in the current directory. The environment variable should look something like this: ~/.luna or if you want it for all users /.luna . Of course you first have to create that directory.","title":"Environment"},{"location":"getting_started/installation/","text":"Installation To install Luna you have to have cargo installed on your system as well as rustc and build the project yourself. Linux Clone the repository gh repo clone sty00a4-code/luna or download the source code In the new folder, build the code with cargo bundle --release (gives you the path target/release/bundle/deb/luna_{VERSION}_{CPU}.deb ) sudo dpkg -i target/release/bundle/deb/luna_{VERSION}_{CPU}.deb Windows not yet supported due to cargo bundle not working properly on windows systems. it's best to use the Ubuntu subsystem for Windows and install it on there with the Linux instructions.","title":"Installation"},{"location":"getting_started/installation/#installation","text":"To install Luna you have to have cargo installed on your system as well as rustc and build the project yourself.","title":"Installation"},{"location":"getting_started/installation/#linux","text":"Clone the repository gh repo clone sty00a4-code/luna or download the source code In the new folder, build the code with cargo bundle --release (gives you the path target/release/bundle/deb/luna_{VERSION}_{CPU}.deb ) sudo dpkg -i target/release/bundle/deb/luna_{VERSION}_{CPU}.deb","title":"Linux"},{"location":"getting_started/installation/#windows","text":"not yet supported due to cargo bundle not working properly on windows systems. it's best to use the Ubuntu subsystem for Windows and install it on there with the Linux instructions.","title":"Windows"},{"location":"guide/basic-values/","text":"Basic Values Here are all the values supported by Luna: name description null no value int signed integer number (64 bits) float floating-point number (64 bits) bool boolean value (true/flase) char single byte as a character string a string of characters (vector of bytes) vector dynamic array of values object string-value pair map fn function user-object externally defined object (in Rust)","title":"Basic Values"},{"location":"guide/basic-values/#basic-values","text":"Here are all the values supported by Luna: name description null no value int signed integer number (64 bits) float floating-point number (64 bits) bool boolean value (true/flase) char single byte as a character string a string of characters (vector of bytes) vector dynamic array of values object string-value pair map fn function user-object externally defined object (in Rust)","title":"Basic Values"},{"location":"guide/expressions/","text":"Expressions An expression has a lot of variants like binary or unary expressions, calls or just be an Atom Atom An Atom is the smallest possible expression, just being one value or a Path . Values All of the tokens that are atomic like null , int , float , etc. are valid Atoms. Examples: 1 , null , true , \"hello there\" Sub-Expression Of course an Atom can also be another Expression Examples: (a + b) , ((a + b) * c) , (1) Vector A list of Expressions Examples: [1, 2, 3] , [a + b, \"joe\", false] Object A list of identifier and Expression pairs Examples: { name = \"joe\", age = 25 } If-Expression A conditional expression branch with required if and else-cases. Examples: if age > 18 \"of age\" else \"under age\" Function Definition This is used to define functions with parameters as an expression. Examples: fn (a, b) { return a + b } Path A path is either an identifier or a field/index into another path Examples: a , a.b , a.b.c , a[1]","title":"Expressions"},{"location":"guide/expressions/#expressions","text":"An expression has a lot of variants like binary or unary expressions, calls or just be an Atom","title":"Expressions"},{"location":"guide/expressions/#atom","text":"An Atom is the smallest possible expression, just being one value or a Path .","title":"Atom"},{"location":"guide/expressions/#values","text":"All of the tokens that are atomic like null , int , float , etc. are valid Atoms. Examples: 1 , null , true , \"hello there\"","title":"Values"},{"location":"guide/expressions/#sub-expression","text":"Of course an Atom can also be another Expression Examples: (a + b) , ((a + b) * c) , (1)","title":"Sub-Expression"},{"location":"guide/expressions/#vector","text":"A list of Expressions Examples: [1, 2, 3] , [a + b, \"joe\", false]","title":"Vector"},{"location":"guide/expressions/#object","text":"A list of identifier and Expression pairs Examples: { name = \"joe\", age = 25 }","title":"Object"},{"location":"guide/expressions/#if-expression","text":"A conditional expression branch with required if and else-cases. Examples: if age > 18 \"of age\" else \"under age\"","title":"If-Expression"},{"location":"guide/expressions/#function-definition","text":"This is used to define functions with parameters as an expression. Examples: fn (a, b) { return a + b }","title":"Function Definition"},{"location":"guide/expressions/#path","text":"A path is either an identifier or a field/index into another path Examples: a , a.b , a.b.c , a[1]","title":"Path"},{"location":"guide/functions/","text":"Functions Functions in Luna are first-class values, which means they can be passed around like any other native value type. A function consists of a closure reference and an UpValue list. A normal code Chunk is also just a function, that gets executed immediatly after compilation. let fn add(a, b) { return a + b } print(add(1, 2)) This code generates two closures (code instance that can reference other closures), one is the main closure, and the other is the add function. The main closure has a reference to the add closure, because it needs to assign it to the local add variable as a function referencing that closure (note that this function has no upvalues). UpValues UpValues are an important concept in Luna, as they let functions keep references to values even though their scope is not active anymore. The best example is a counter function. let fn counter() { let count = 1 return fn () { count += 1 return count } } This function called counter returns a function that references a closure, but also has to keep a reference to the value saved in count , because it uses it to increment it's counting value. The compiler automatically infers that the count variable from the outer scope is being referenced here, so it saves a copy to it's reference. Because Luna has a reference-counting garbage collector, the reference will not be invalid after the counter function is done executing. If it weren't referenced, the count variable would be dropped from memory. As long as the function still exists, this value reference exists too. The reference is also never the same for each call to counter . let c1 = counter() # function with a unique reference to `count` let c2 = counter() # another function with a unique reference to another `count` Here we have to different functions being assigned to c1 and c2 . Both functions reference the same closure, but not the same count value. This allows multiple counters to exist in this program making the following code work like you would expect: print(c1()) # 1 print(c1()) # 2 print(c1()) # 3 print(c2()) # 1 print(c2()) # 2 print(c2()) # 3","title":"Functions"},{"location":"guide/functions/#functions","text":"Functions in Luna are first-class values, which means they can be passed around like any other native value type. A function consists of a closure reference and an UpValue list. A normal code Chunk is also just a function, that gets executed immediatly after compilation. let fn add(a, b) { return a + b } print(add(1, 2)) This code generates two closures (code instance that can reference other closures), one is the main closure, and the other is the add function. The main closure has a reference to the add closure, because it needs to assign it to the local add variable as a function referencing that closure (note that this function has no upvalues).","title":"Functions"},{"location":"guide/functions/#upvalues","text":"UpValues are an important concept in Luna, as they let functions keep references to values even though their scope is not active anymore. The best example is a counter function. let fn counter() { let count = 1 return fn () { count += 1 return count } } This function called counter returns a function that references a closure, but also has to keep a reference to the value saved in count , because it uses it to increment it's counting value. The compiler automatically infers that the count variable from the outer scope is being referenced here, so it saves a copy to it's reference. Because Luna has a reference-counting garbage collector, the reference will not be invalid after the counter function is done executing. If it weren't referenced, the count variable would be dropped from memory. As long as the function still exists, this value reference exists too. The reference is also never the same for each call to counter . let c1 = counter() # function with a unique reference to `count` let c2 = counter() # another function with a unique reference to another `count` Here we have to different functions being assigned to c1 and c2 . Both functions reference the same closure, but not the same count value. This allows multiple counters to exist in this program making the following code work like you would expect: print(c1()) # 1 print(c1()) # 2 print(c1()) # 3 print(c2()) # 1 print(c2()) # 2 print(c2()) # 3","title":"UpValues"},{"location":"guide/grammar/","text":"Grammar The grammar of Luna is very closue to modern languages like JavaScript and Rust Atomic Tokens The following is a list of atomic tokens and what their regex is: name regex null /null/ ident /[a-zA-Z_]([a-zA-Z_0-9]*)/ int /[0-9]+/ float /[0-9]+\\./ , /[0-9]+\\.[0-9]+/ bool /true/ , /false/ char /'\\.'/ string /\"[^\"]*\"/ Keywords The following is a list of reserved keywords: keyword description let local variable definitions fn function definitions if conditional branches else else conditional branches of if statements match match statement while while loops for for loops in iterate over something in a for loop statement return return from a call break break out of a loop continue skip to next iteration of a loop null represents the null value true represents the boolean value true false represents the boolean value false Symbols The following is a list of reserved keywords: symbol name = equal , comma . dot : colon ! exclamation ( paran left ) paran right [ bracket left ] bracket right { brace left } brace right + plus - minus * star / slash % percent ^ exponent += plus equal -= minus equal *= star equal /= slash equal %= percent equal ^= exponent equal == equal equal != exclamation equal < less > greater <= less equal >= greater equal & ampersand | pipe Syntax Sugar Luna has the same design philosophy as Lua. What that means is that certain syntax is only another way to write the same thing: fn add(a, b) { return a + b } translates to add = fn(a, b) { return a + b }","title":"Grammar"},{"location":"guide/grammar/#grammar","text":"The grammar of Luna is very closue to modern languages like JavaScript and Rust","title":"Grammar"},{"location":"guide/grammar/#atomic-tokens","text":"The following is a list of atomic tokens and what their regex is: name regex null /null/ ident /[a-zA-Z_]([a-zA-Z_0-9]*)/ int /[0-9]+/ float /[0-9]+\\./ , /[0-9]+\\.[0-9]+/ bool /true/ , /false/ char /'\\.'/ string /\"[^\"]*\"/","title":"Atomic Tokens"},{"location":"guide/grammar/#keywords","text":"The following is a list of reserved keywords: keyword description let local variable definitions fn function definitions if conditional branches else else conditional branches of if statements match match statement while while loops for for loops in iterate over something in a for loop statement return return from a call break break out of a loop continue skip to next iteration of a loop null represents the null value true represents the boolean value true false represents the boolean value false","title":"Keywords"},{"location":"guide/grammar/#symbols","text":"The following is a list of reserved keywords: symbol name = equal , comma . dot : colon ! exclamation ( paran left ) paran right [ bracket left ] bracket right { brace left } brace right + plus - minus * star / slash % percent ^ exponent += plus equal -= minus equal *= star equal /= slash equal %= percent equal ^= exponent equal == equal equal != exclamation equal < less > greater <= less equal >= greater equal & ampersand | pipe","title":"Symbols"},{"location":"guide/grammar/#syntax-sugar","text":"Luna has the same design philosophy as Lua. What that means is that certain syntax is only another way to write the same thing: fn add(a, b) { return a + b } translates to add = fn(a, b) { return a + b }","title":"Syntax Sugar"},{"location":"guide/objects/","text":"Objects Objects are an important part of Luna. They are a map of string-value pairs, that can be read and assigned freely. An object value is only a reference to the actual object, which means passing it around means passing around the reference. Any function that has a reference to an object can modify it's contents. Meta Objects Every object can have an optional reference to another object, being it's meta object. Those objects are just like normal objects, except they can define custom behaviour for the object that references it as an meta object. let person = { name = \"joe\", age = 25 } setmeta(person, {}) Now the object referenced by person got an empty meta object. This meta object does not have any fields that could influence the person object. Meta Fields There are a few meta fields predefined in Luna. field effect __name: string when the object is casted to a string, this string will be displayed instead of the default object __type: string when the object's type is trying to be determined, this string will be returned __str: fn(self: object): string when the object is trying to be casted to a string, this function will be called with the object as the first argument __call: fn(self: object, ...) when the object is trying to be called, this function will be called __get: fn(self: object, key: string) when trying to get a field of the object, this function will be called __set: fn(self: object, key: string, value) when trying to set a field of the object, this function will be called __next: fn(self: object) when trying get the next iteration in a for-loop, this function will be called and it's return value will be assign to the for-loop's variable User-Objects User-objects are externally defined structures in Luna's mother language, Rust. They allow for interoperational functionality between Luna and Rust. This is usefull for file handling for example. let file = fs.open(\"test.txt\", \"r\") if some(file) { print(file) print(file:read()) } output: file:0x631349d52af8 test test! This code opens a file with the name file.txt in r ead mode and saves the file user-object in the local file . if the file was found, then the program first prints the file object and then the content of it with the read function.","title":"Objects"},{"location":"guide/objects/#objects","text":"Objects are an important part of Luna. They are a map of string-value pairs, that can be read and assigned freely. An object value is only a reference to the actual object, which means passing it around means passing around the reference. Any function that has a reference to an object can modify it's contents.","title":"Objects"},{"location":"guide/objects/#meta-objects","text":"Every object can have an optional reference to another object, being it's meta object. Those objects are just like normal objects, except they can define custom behaviour for the object that references it as an meta object. let person = { name = \"joe\", age = 25 } setmeta(person, {}) Now the object referenced by person got an empty meta object. This meta object does not have any fields that could influence the person object.","title":"Meta Objects"},{"location":"guide/objects/#meta-fields","text":"There are a few meta fields predefined in Luna. field effect __name: string when the object is casted to a string, this string will be displayed instead of the default object __type: string when the object's type is trying to be determined, this string will be returned __str: fn(self: object): string when the object is trying to be casted to a string, this function will be called with the object as the first argument __call: fn(self: object, ...) when the object is trying to be called, this function will be called __get: fn(self: object, key: string) when trying to get a field of the object, this function will be called __set: fn(self: object, key: string, value) when trying to set a field of the object, this function will be called __next: fn(self: object) when trying get the next iteration in a for-loop, this function will be called and it's return value will be assign to the for-loop's variable","title":"Meta Fields"},{"location":"guide/objects/#user-objects","text":"User-objects are externally defined structures in Luna's mother language, Rust. They allow for interoperational functionality between Luna and Rust. This is usefull for file handling for example. let file = fs.open(\"test.txt\", \"r\") if some(file) { print(file) print(file:read()) } output: file:0x631349d52af8 test test! This code opens a file with the name file.txt in r ead mode and saves the file user-object in the local file . if the file was found, then the program first prints the file object and then the content of it with the read function.","title":"User-Objects"},{"location":"guide/statements/","text":"Statements A Luna program is basically a list of statements, called a Chunk . Chunk A list of statements with no seperator Block Just a list of statements like a Chunk , but it requires { at the start and } at the end. Statement A statement has a lot of variants, like let-bindings, function definitions, etc. But it also can as well just be a Block Let Binding This is what you define local variables with. The assignees can be simple identifiers or object/vector destructurings. Examples: let a = 1 , let { name, age } = person , let [first, second, third] = numbers Let-Else Binding Like a Let Binding , except if the assigned value is null , the else block will be executed let name = person.name else { print(\"no name :(\") return null } Assign This is how you assign new values to existing variables. The assignees can be simple identifiers or a field/index into an object/vector Examples: a = 2 Assign Operation Written the same way as Assign expect with any of the following assign operators, only one assignee and only one expression: assign operators += -= *= /= ^= %= Examples: a += 1 , b *= 2 Call This is to call functions with arguments. The callee can either be a simple identifier or a field/index of an object/vector. Examples: print(\"Hello, World!\") , self.add(1) Self Call Just like a Call only written with a : followed by an identifier. This calls the function with the first argument being the value before the : . This is used to call objects with themselfs for object-oriented design patterns. Examples: vector:push(1) , person:greet() Function Definition This is used to globally define functions with parameters. Examples: fn add(a, b) { return a + b } Let-Function Definition This is used to locally define functions with parameters in the current scope. Examples: let fn add(a, b) { return a + b } If-Branch Classical if-branch like any other. Has an optional else-case which can either be a block or another if-branch. Examples: if cond { print(\"yay\") } if cond { print(\"yay\") } else { print(\"nay\") } if cond { print(\"yay\") } else if cond2 { print(\"semi-yay\") } If-Branch Assignes the right side of the equal to the parameter on the left and only enters the branch, if the value is not null . Examples: if let name = person.name { print(name) } if let name = person.name { print(name) } else { print(\"anonymous\") } if let name = person.name { print(name) } else if let nickname = person.nickname { print(nickname) } Match Classical match-case statement to check over multiple variants of one value. Examples: match cmd { \"exit\" => { os.exit() } cmd if cmd:len() > 0 => { print(\"invalid command: %s\":format(cmd)) } cmd => {} } While-Loop Classical while-loop like any other. body has to be a block Examples: while a < 10 { a += 1 } While-Let-Loop Assigns the right side of the equals to parameter on the left side. If it is null , the loop is exited. Examples: while let n = range:next() { print(n) } For-Loop Python-like for-loop that requires an iterable to be right of the in keyword. Only one variable can be given for each iteration. An iterable can either be an user-object with a next method, an object with the meta variable __next which is a function, or just a function. Examples: for n in [1, 2, 3]:iter() { print(n) } for key in keys(map) { print(key, map[key]) } Return This is used to return a value to the caller and end execution of the current function. Examples: return a + b , return null Break This is used to break out of any loop. Examples: while true { if a >= 10 { break } a += 1 } Continue This is used to continue to the next iteration of the loop. Examples: for n in numbers:iter() { if n == 5 { continue } print(n) }","title":"Statements"},{"location":"guide/statements/#statements","text":"A Luna program is basically a list of statements, called a Chunk .","title":"Statements"},{"location":"guide/statements/#chunk","text":"A list of statements with no seperator","title":"Chunk"},{"location":"guide/statements/#block","text":"Just a list of statements like a Chunk , but it requires { at the start and } at the end.","title":"Block"},{"location":"guide/statements/#statement","text":"A statement has a lot of variants, like let-bindings, function definitions, etc. But it also can as well just be a Block","title":"Statement"},{"location":"guide/statements/#let-binding","text":"This is what you define local variables with. The assignees can be simple identifiers or object/vector destructurings. Examples: let a = 1 , let { name, age } = person , let [first, second, third] = numbers","title":"Let Binding"},{"location":"guide/statements/#let-else-binding","text":"Like a Let Binding , except if the assigned value is null , the else block will be executed let name = person.name else { print(\"no name :(\") return null }","title":"Let-Else Binding"},{"location":"guide/statements/#assign","text":"This is how you assign new values to existing variables. The assignees can be simple identifiers or a field/index into an object/vector Examples: a = 2","title":"Assign"},{"location":"guide/statements/#assign-operation","text":"Written the same way as Assign expect with any of the following assign operators, only one assignee and only one expression: assign operators += -= *= /= ^= %= Examples: a += 1 , b *= 2","title":"Assign Operation"},{"location":"guide/statements/#call","text":"This is to call functions with arguments. The callee can either be a simple identifier or a field/index of an object/vector. Examples: print(\"Hello, World!\") , self.add(1)","title":"Call"},{"location":"guide/statements/#self-call","text":"Just like a Call only written with a : followed by an identifier. This calls the function with the first argument being the value before the : . This is used to call objects with themselfs for object-oriented design patterns. Examples: vector:push(1) , person:greet()","title":"Self Call"},{"location":"guide/statements/#function-definition","text":"This is used to globally define functions with parameters. Examples: fn add(a, b) { return a + b }","title":"Function Definition"},{"location":"guide/statements/#let-function-definition","text":"This is used to locally define functions with parameters in the current scope. Examples: let fn add(a, b) { return a + b }","title":"Let-Function Definition"},{"location":"guide/statements/#if-branch","text":"Classical if-branch like any other. Has an optional else-case which can either be a block or another if-branch. Examples: if cond { print(\"yay\") } if cond { print(\"yay\") } else { print(\"nay\") } if cond { print(\"yay\") } else if cond2 { print(\"semi-yay\") }","title":"If-Branch"},{"location":"guide/statements/#if-branch_1","text":"Assignes the right side of the equal to the parameter on the left and only enters the branch, if the value is not null . Examples: if let name = person.name { print(name) } if let name = person.name { print(name) } else { print(\"anonymous\") } if let name = person.name { print(name) } else if let nickname = person.nickname { print(nickname) }","title":"If-Branch"},{"location":"guide/statements/#match","text":"Classical match-case statement to check over multiple variants of one value. Examples: match cmd { \"exit\" => { os.exit() } cmd if cmd:len() > 0 => { print(\"invalid command: %s\":format(cmd)) } cmd => {} }","title":"Match"},{"location":"guide/statements/#while-loop","text":"Classical while-loop like any other. body has to be a block Examples: while a < 10 { a += 1 }","title":"While-Loop"},{"location":"guide/statements/#while-let-loop","text":"Assigns the right side of the equals to parameter on the left side. If it is null , the loop is exited. Examples: while let n = range:next() { print(n) }","title":"While-Let-Loop"},{"location":"guide/statements/#for-loop","text":"Python-like for-loop that requires an iterable to be right of the in keyword. Only one variable can be given for each iteration. An iterable can either be an user-object with a next method, an object with the meta variable __next which is a function, or just a function. Examples: for n in [1, 2, 3]:iter() { print(n) } for key in keys(map) { print(key, map[key]) }","title":"For-Loop"},{"location":"guide/statements/#return","text":"This is used to return a value to the caller and end execution of the current function. Examples: return a + b , return null","title":"Return"},{"location":"guide/statements/#break","text":"This is used to break out of any loop. Examples: while true { if a >= 10 { break } a += 1 }","title":"Break"},{"location":"guide/statements/#continue","text":"This is used to continue to the next iteration of the loop. Examples: for n in numbers:iter() { if n == 5 { continue } print(n) }","title":"Continue"},{"location":"guide/variables/","text":"Variables Variables in Luna are scoped. let a = 1 { let b = 2 print(a) print(b) } print(a) Here we created two variables a and b . a is scoped to the entire chunk of code, but b on the other hand is only scoped to the two curly braces. This is because we are defining a block with { and } which has it's own scope that ends at the } . Parameters Function parameters are just like local variables, just that they are bound differently. fn add(a, b) { let result = a + b return result } When calling this function with arguments as follows, 1 and 2 will be assigned to a and b for that call: add(1, 2) Globals Variables don't have to be assigned locally to a scope though. The other way to create variables is globally by just using an assignment statement with no let in front of it. VAR = \"this is a global variables\" No matter where, after this statement has been executed, does the interpreter not have access to that value through that name.","title":"Variables"},{"location":"guide/variables/#variables","text":"Variables in Luna are scoped. let a = 1 { let b = 2 print(a) print(b) } print(a) Here we created two variables a and b . a is scoped to the entire chunk of code, but b on the other hand is only scoped to the two curly braces. This is because we are defining a block with { and } which has it's own scope that ends at the } .","title":"Variables"},{"location":"guide/variables/#parameters","text":"Function parameters are just like local variables, just that they are bound differently. fn add(a, b) { let result = a + b return result } When calling this function with arguments as follows, 1 and 2 will be assigned to a and b for that call: add(1, 2)","title":"Parameters"},{"location":"guide/variables/#globals","text":"Variables don't have to be assigned locally to a scope though. The other way to create variables is globally by just using an assignment statement with no let in front of it. VAR = \"this is a global variables\" No matter where, after this statement has been executed, does the interpreter not have access to that value through that name.","title":"Globals"},{"location":"standard_modules/array/","text":"Array Module array.u8(length: int?, init: vector<int>?): array<u8> Creates a new concise array of only u8 values. array.u16(length: int?, init: vector<int>?): array<u16> Creates a new concise array of only u16 values. array.u32(length: int?, init: vector<int>?): array<u32> Creates a new concise array of only u32 values. array.u64(length: int?, init: vector<int>?): array<u64> Creates a new concise array of only u64 values. array.u128(length: int?, init: vector<int>?): array<u128> Creates a new concise array of only u128 values. array.i8(length: int?, init: vector<int>?): array<i8> Creates a new concise array of only i8 values. array.i16(length: int?, init: vector<int>?): array<i16> Creates a new concise array of only u16 values. array.i32(length: int?, init: vector<int>?): array<i32> Creates a new concise array of only i32 values. array.i64(length: int?, init: vector<int>?): array<i64> Creates a new concise array of only i64 values. array.i128(length: int?, init: vector<int>?): array<i128> Creates a new concise array of only i128 values. array.f32(length: float?, init: vector<float>?): array<f32> Creates a new concise array of only f32 values. array.f64(length: float?, init: vector<float>?): array<f64> Creates a new concise array of only f64 values. array.bool(length: bool?, init: vector<bool>?): array<bool> Creates a new concise array of only bool values. array.char(length: char?, init: vector<char>?): array<char> Creates a new concise array of only char values.","title":"Array"},{"location":"standard_modules/array/#array-module","text":"","title":"Array Module"},{"location":"standard_modules/array/#arrayu8length-int-init-vectorint-arrayu8","text":"Creates a new concise array of only u8 values.","title":"array.u8(length: int?, init: vector&lt;int&gt;?): array&lt;u8&gt;"},{"location":"standard_modules/array/#arrayu16length-int-init-vectorint-arrayu16","text":"Creates a new concise array of only u16 values.","title":"array.u16(length: int?, init: vector&lt;int&gt;?): array&lt;u16&gt;"},{"location":"standard_modules/array/#arrayu32length-int-init-vectorint-arrayu32","text":"Creates a new concise array of only u32 values.","title":"array.u32(length: int?, init: vector&lt;int&gt;?): array&lt;u32&gt;"},{"location":"standard_modules/array/#arrayu64length-int-init-vectorint-arrayu64","text":"Creates a new concise array of only u64 values.","title":"array.u64(length: int?, init: vector&lt;int&gt;?): array&lt;u64&gt;"},{"location":"standard_modules/array/#arrayu128length-int-init-vectorint-arrayu128","text":"Creates a new concise array of only u128 values.","title":"array.u128(length: int?, init: vector&lt;int&gt;?): array&lt;u128&gt;"},{"location":"standard_modules/array/#arrayi8length-int-init-vectorint-arrayi8","text":"Creates a new concise array of only i8 values.","title":"array.i8(length: int?, init: vector&lt;int&gt;?): array&lt;i8&gt;"},{"location":"standard_modules/array/#arrayi16length-int-init-vectorint-arrayi16","text":"Creates a new concise array of only u16 values.","title":"array.i16(length: int?, init: vector&lt;int&gt;?): array&lt;i16&gt;"},{"location":"standard_modules/array/#arrayi32length-int-init-vectorint-arrayi32","text":"Creates a new concise array of only i32 values.","title":"array.i32(length: int?, init: vector&lt;int&gt;?): array&lt;i32&gt;"},{"location":"standard_modules/array/#arrayi64length-int-init-vectorint-arrayi64","text":"Creates a new concise array of only i64 values.","title":"array.i64(length: int?, init: vector&lt;int&gt;?): array&lt;i64&gt;"},{"location":"standard_modules/array/#arrayi128length-int-init-vectorint-arrayi128","text":"Creates a new concise array of only i128 values.","title":"array.i128(length: int?, init: vector&lt;int&gt;?): array&lt;i128&gt;"},{"location":"standard_modules/array/#arrayf32length-float-init-vectorfloat-arrayf32","text":"Creates a new concise array of only f32 values.","title":"array.f32(length: float?, init: vector&lt;float&gt;?): array&lt;f32&gt;"},{"location":"standard_modules/array/#arrayf64length-float-init-vectorfloat-arrayf64","text":"Creates a new concise array of only f64 values.","title":"array.f64(length: float?, init: vector&lt;float&gt;?): array&lt;f64&gt;"},{"location":"standard_modules/array/#arrayboollength-bool-init-vectorbool-arraybool","text":"Creates a new concise array of only bool values.","title":"array.bool(length: bool?, init: vector&lt;bool&gt;?): array&lt;bool&gt;"},{"location":"standard_modules/array/#arraycharlength-char-init-vectorchar-arraychar","text":"Creates a new concise array of only char values.","title":"array.char(length: char?, init: vector&lt;char&gt;?): array&lt;char&gt;"},{"location":"standard_modules/env/","text":"ENV Module env.set_var(key: string, value) Sets the environment variable key to the value as a string for the currently running process. env.var(key: string): string? Fetches the environment variable key from the current process. env.remove_var(key: string) Removes an environment variable key from the environment of the currently running process. env.vars(): object<string> Returns an object of strings, for all the environment variables of the current process. env.current_dir(): string? Returns the current working directory. env.current_exe(): string? Returns the full filesystem path of the current running executable. env.args(): string? Returns the arguments that this program was started with (normally passed via the command line).","title":"Env"},{"location":"standard_modules/env/#env-module","text":"","title":"ENV Module"},{"location":"standard_modules/env/#envset_varkey-string-value","text":"Sets the environment variable key to the value as a string for the currently running process.","title":"env.set_var(key: string, value)"},{"location":"standard_modules/env/#envvarkey-string-string","text":"Fetches the environment variable key from the current process.","title":"env.var(key: string): string?"},{"location":"standard_modules/env/#envremove_varkey-string","text":"Removes an environment variable key from the environment of the currently running process.","title":"env.remove_var(key: string)"},{"location":"standard_modules/env/#envvars-objectstring","text":"Returns an object of strings, for all the environment variables of the current process.","title":"env.vars(): object&lt;string&gt;"},{"location":"standard_modules/env/#envcurrent_dir-string","text":"Returns the current working directory.","title":"env.current_dir(): string?"},{"location":"standard_modules/env/#envcurrent_exe-string","text":"Returns the full filesystem path of the current running executable.","title":"env.current_exe(): string?"},{"location":"standard_modules/env/#envargs-string","text":"Returns the arguments that this program was started with (normally passed via the command line).","title":"env.args(): string?"},{"location":"standard_modules/fs/","text":"FS Module fs.open(path: string, mode: \"w\"|\"r\"|\"a\"): file? Opens a file at path with the options specified mode , if it exists. fs.list(path: string): vector<string> Returns a vector over the entries within a directory. fs.type(path: string): \"dir\"|\"file\"|null Returns the type of the path .","title":"FS"},{"location":"standard_modules/fs/#fs-module","text":"","title":"FS Module"},{"location":"standard_modules/fs/#fsopenpath-string-mode-wra-file","text":"Opens a file at path with the options specified mode , if it exists.","title":"fs.open(path: string, mode: \"w\"|\"r\"|\"a\"): file?"},{"location":"standard_modules/fs/#fslistpath-string-vectorstring","text":"Returns a vector over the entries within a directory.","title":"fs.list(path: string): vector&lt;string&gt;"},{"location":"standard_modules/fs/#fstypepath-string-dirfilenull","text":"Returns the type of the path .","title":"fs.type(path: string): \"dir\"|\"file\"|null"},{"location":"standard_modules/globals/","text":"Globals print(...) Prints all the arguments to stdout transforming them into strings. input(prefix: string): string Reads the input from stdin until enter has been pressed and returns it as a string. (the string contents are being trimmed) assert(cond) If cond is a false value, an error will be thrown. error(msg) Throws an error with the message msg which is stringified first. exit(code: int?) Exits the program with the exit code code . (default is 0 ) safe_call(f: fn, ...): { ok?, err: string? } Run's the function in safe manner. Errors will not cause the program to crash, but the error will be returned in form of an object as the field err . If it runs successfully the field ok holds the return value. range(start: int, end: int?): iterator<int> Creates an iterator over the given range defined by start and end . If end is null, start will be 0 and end will be the start raw_get(o: object, k: string) Returns the value with the key k in object o , without calling the custom meta-function __get defined for o raw_set(o: object, k: string, value) Sets the value with the key k in object o to value , without calling the custom meta-function __set defined for o iter(iterable: string|vector|object): iterator Call the iterator function for the value iterable next(iter: iterator<V>|object): V? Calls the next function of the iter iterator. If iter is an object that defined the meta-function __next , that function will be called. type(value): string definition: typed.type raw_type(value): string definition: typed.raw_type options(value, ...): bool definition: typed.options some(value): bool definition: typed.some str(...): string definition: string.from keys(o: object): iterator<string> definition: object.keys values(o: object<V>): iterator<V> definition: object.values setmeta(o: object<V>, meta: object?): object<V> definition: object.setmeta getmeta(o: object): object? definition: object.getmeta","title":"Globals"},{"location":"standard_modules/globals/#globals","text":"","title":"Globals"},{"location":"standard_modules/globals/#print","text":"Prints all the arguments to stdout transforming them into strings.","title":"print(...)"},{"location":"standard_modules/globals/#inputprefix-string-string","text":"Reads the input from stdin until enter has been pressed and returns it as a string. (the string contents are being trimmed)","title":"input(prefix: string): string"},{"location":"standard_modules/globals/#assertcond","text":"If cond is a false value, an error will be thrown.","title":"assert(cond)"},{"location":"standard_modules/globals/#errormsg","text":"Throws an error with the message msg which is stringified first.","title":"error(msg)"},{"location":"standard_modules/globals/#exitcode-int","text":"Exits the program with the exit code code . (default is 0 )","title":"exit(code: int?)"},{"location":"standard_modules/globals/#safe_callf-fn-ok-err-string","text":"Run's the function in safe manner. Errors will not cause the program to crash, but the error will be returned in form of an object as the field err . If it runs successfully the field ok holds the return value.","title":"safe_call(f: fn, ...): { ok?, err: string? }"},{"location":"standard_modules/globals/#rangestart-int-end-int-iteratorint","text":"Creates an iterator over the given range defined by start and end . If end is null, start will be 0 and end will be the start","title":"range(start: int, end: int?): iterator&lt;int&gt;"},{"location":"standard_modules/globals/#raw_geto-object-k-string","text":"Returns the value with the key k in object o , without calling the custom meta-function __get defined for o","title":"raw_get(o: object, k: string)"},{"location":"standard_modules/globals/#raw_seto-object-k-string-value","text":"Sets the value with the key k in object o to value , without calling the custom meta-function __set defined for o","title":"raw_set(o: object, k: string, value)"},{"location":"standard_modules/globals/#iteriterable-stringvectorobject-iterator","text":"Call the iterator function for the value iterable","title":"iter(iterable: string|vector|object): iterator"},{"location":"standard_modules/globals/#nextiter-iteratorvobject-v","text":"Calls the next function of the iter iterator. If iter is an object that defined the meta-function __next , that function will be called.","title":"next(iter: iterator&lt;V&gt;|object): V?"},{"location":"standard_modules/globals/#typevalue-string","text":"definition: typed.type","title":"type(value): string"},{"location":"standard_modules/globals/#raw_typevalue-string","text":"definition: typed.raw_type","title":"raw_type(value): string"},{"location":"standard_modules/globals/#optionsvalue-bool","text":"definition: typed.options","title":"options(value, ...): bool"},{"location":"standard_modules/globals/#somevalue-bool","text":"definition: typed.some","title":"some(value): bool"},{"location":"standard_modules/globals/#str-string","text":"definition: string.from","title":"str(...): string"},{"location":"standard_modules/globals/#keyso-object-iteratorstring","text":"definition: object.keys","title":"keys(o: object): iterator&lt;string&gt;"},{"location":"standard_modules/globals/#valueso-objectv-iteratorv","text":"definition: object.values","title":"values(o: object&lt;V&gt;): iterator&lt;V&gt;"},{"location":"standard_modules/globals/#setmetao-objectv-meta-object-objectv","text":"definition: object.setmeta","title":"setmeta(o: object&lt;V&gt;, meta: object?): object&lt;V&gt;"},{"location":"standard_modules/globals/#getmetao-object-object","text":"definition: object.getmeta","title":"getmeta(o: object): object?"},{"location":"standard_modules/io/","text":"IO Module io.write(s: string) Writes s to stdout . io.flush() Flushes stdout . io.stdin(): stdin Returns the stdin user-object. io.stdout(): stdout Returns the stdout user-object. io.stderr(): stderr Returns the stderr user-object.","title":"IO"},{"location":"standard_modules/io/#io-module","text":"","title":"IO Module"},{"location":"standard_modules/io/#iowrites-string","text":"Writes s to stdout .","title":"io.write(s: string)"},{"location":"standard_modules/io/#ioflush","text":"Flushes stdout .","title":"io.flush()"},{"location":"standard_modules/io/#iostdin-stdin","text":"Returns the stdin user-object.","title":"io.stdin(): stdin"},{"location":"standard_modules/io/#iostdout-stdout","text":"Returns the stdout user-object.","title":"io.stdout(): stdout"},{"location":"standard_modules/io/#iostderr-stderr","text":"Returns the stderr user-object.","title":"io.stderr(): stderr"},{"location":"standard_modules/math/","text":"Math Modules math.pi: float PI as a float; 3.141592653589793 . math.nan: float NaN as a float value. math.inf: float Infinity as a float value. math.e: float Epsilon as a float value. math.abs(n: number): number Returns the absolute value of n . math.sqrt(n: number): number Returns the square root of n . math.exp(n: number): number Returns math.e^n , (the exponential function). math.exp2(n: number): number Returns 2^n math.exp_m1(n: number): number Returns e^n - 1 in a way that is accurate even if the number is close to zero. math.signum(n: number): number Returns a number that represents the sign of n . 1.0 if the number is positive, +0.0 or inf -1.0 if the number is negative, -0.0 or -inf NaN if the number is NaN math.fract(n: number): number Returns the fractional part of n . math.sin(n: number): number Returns the sine of n (in radians). math.cos(n: number): number Returns the cosine of n (in radians). math.tan(n: number): number Returns the tangent of n (in radians). math.sinh(n: number): number Returns the hyperbolic sine of n (in radians). math.cosh(n: number): number Returns the hyperbolic cosine of n (in radians). math.tanh(n: number): number Returns the hyperbolic tangent of n (in radians). math.asin(n: number): number Returns the arcsine of n (in radians). math.acos(n: number): number Returns the arccosine of n (in radians). math.atan(n: number): number Returns the arctangent of n (in radians). math.asinh(n: number): number Returns the hyperbolic arcsine of n (in radians). math.acosh(n: number): number Returns the hyperbolic arccosine of n (in radians). math.atanh(n: number): number Returns the hyperbolic arctangent of n (in radians). math.deg(n: number): number Converts n radians to degrees. math.rad(n: number): number Converts n degrees to radians. math.random(): float Returns a thread local random float from 0 to 1 .","title":"Math"},{"location":"standard_modules/math/#math-modules","text":"","title":"Math Modules"},{"location":"standard_modules/math/#mathpi-float","text":"PI as a float; 3.141592653589793 .","title":"math.pi: float"},{"location":"standard_modules/math/#mathnan-float","text":"NaN as a float value.","title":"math.nan: float"},{"location":"standard_modules/math/#mathinf-float","text":"Infinity as a float value.","title":"math.inf: float"},{"location":"standard_modules/math/#mathe-float","text":"Epsilon as a float value.","title":"math.e: float"},{"location":"standard_modules/math/#mathabsn-number-number","text":"Returns the absolute value of n .","title":"math.abs(n: number): number"},{"location":"standard_modules/math/#mathsqrtn-number-number","text":"Returns the square root of n .","title":"math.sqrt(n: number): number"},{"location":"standard_modules/math/#mathexpn-number-number","text":"Returns math.e^n , (the exponential function).","title":"math.exp(n: number): number"},{"location":"standard_modules/math/#mathexp2n-number-number","text":"Returns 2^n","title":"math.exp2(n: number): number"},{"location":"standard_modules/math/#mathexp_m1n-number-number","text":"Returns e^n - 1 in a way that is accurate even if the number is close to zero.","title":"math.exp_m1(n: number): number"},{"location":"standard_modules/math/#mathsignumn-number-number","text":"Returns a number that represents the sign of n . 1.0 if the number is positive, +0.0 or inf -1.0 if the number is negative, -0.0 or -inf NaN if the number is NaN","title":"math.signum(n: number): number"},{"location":"standard_modules/math/#mathfractn-number-number","text":"Returns the fractional part of n .","title":"math.fract(n: number): number"},{"location":"standard_modules/math/#mathsinn-number-number","text":"Returns the sine of n (in radians).","title":"math.sin(n: number): number"},{"location":"standard_modules/math/#mathcosn-number-number","text":"Returns the cosine of n (in radians).","title":"math.cos(n: number): number"},{"location":"standard_modules/math/#mathtann-number-number","text":"Returns the tangent of n (in radians).","title":"math.tan(n: number): number"},{"location":"standard_modules/math/#mathsinhn-number-number","text":"Returns the hyperbolic sine of n (in radians).","title":"math.sinh(n: number): number"},{"location":"standard_modules/math/#mathcoshn-number-number","text":"Returns the hyperbolic cosine of n (in radians).","title":"math.cosh(n: number): number"},{"location":"standard_modules/math/#mathtanhn-number-number","text":"Returns the hyperbolic tangent of n (in radians).","title":"math.tanh(n: number): number"},{"location":"standard_modules/math/#mathasinn-number-number","text":"Returns the arcsine of n (in radians).","title":"math.asin(n: number): number"},{"location":"standard_modules/math/#mathacosn-number-number","text":"Returns the arccosine of n (in radians).","title":"math.acos(n: number): number"},{"location":"standard_modules/math/#mathatann-number-number","text":"Returns the arctangent of n (in radians).","title":"math.atan(n: number): number"},{"location":"standard_modules/math/#mathasinhn-number-number","text":"Returns the hyperbolic arcsine of n (in radians).","title":"math.asinh(n: number): number"},{"location":"standard_modules/math/#mathacoshn-number-number","text":"Returns the hyperbolic arccosine of n (in radians).","title":"math.acosh(n: number): number"},{"location":"standard_modules/math/#mathatanhn-number-number","text":"Returns the hyperbolic arctangent of n (in radians).","title":"math.atanh(n: number): number"},{"location":"standard_modules/math/#mathdegn-number-number","text":"Converts n radians to degrees.","title":"math.deg(n: number): number"},{"location":"standard_modules/math/#mathradn-number-number","text":"Converts n degrees to radians.","title":"math.rad(n: number): number"},{"location":"standard_modules/math/#mathrandom-float","text":"Returns a thread local random float from 0 to 1 .","title":"math.random(): float"},{"location":"standard_modules/net/","text":"Net Module net.bind(addr: string, port: int): tcp-listener? Creates a new TCP-listener if it can which will be bound to the specified addr and port . If the port is invalid, it will throw an error net.connect(addr: string, port: int): tcp-stream? Opens a TCP connection to a remote host as a TCP-stream with the address addr and port port if it can.","title":"Net"},{"location":"standard_modules/net/#net-module","text":"","title":"Net Module"},{"location":"standard_modules/net/#netbindaddr-string-port-int-tcp-listener","text":"Creates a new TCP-listener if it can which will be bound to the specified addr and port . If the port is invalid, it will throw an error","title":"net.bind(addr: string, port: int): tcp-listener?"},{"location":"standard_modules/net/#netconnectaddr-string-port-int-tcp-stream","text":"Opens a TCP connection to a remote host as a TCP-stream with the address addr and port port if it can.","title":"net.connect(addr: string, port: int): tcp-stream?"},{"location":"standard_modules/os/","text":"OS Module os.exec(command: string, ...): { ok: string?, err: string? } Executes the command as a child process, waiting for it to finish and collecting all of its output. os.time(): float Returns the number of non-leap-microseconds since January 1, 1970 UTC. os.sleep(secs: number) Puts the current thread to sleep for at least the specified amount of time.","title":"OS"},{"location":"standard_modules/os/#os-module","text":"","title":"OS Module"},{"location":"standard_modules/os/#osexeccommand-string-ok-string-err-string","text":"Executes the command as a child process, waiting for it to finish and collecting all of its output.","title":"os.exec(command: string, ...): { ok: string?, err: string? }"},{"location":"standard_modules/os/#ostime-float","text":"Returns the number of non-leap-microseconds since January 1, 1970 UTC.","title":"os.time(): float"},{"location":"standard_modules/os/#ossleepsecs-number","text":"Puts the current thread to sleep for at least the specified amount of time.","title":"os.sleep(secs: number)"},{"location":"standard_modules/typed/","text":"Typed Module typed.type(value): string Returns the type of value as a string. For objects it looks for the meta-field __type , but returns object as a default. typed.raw_type(value): string Returns the type of value as a string, ignoring the objects meta-field __type . typed.check(value: V, ...: string): V? Checks if the value is of any of the types in the rest of the arguments. typed.check_raw(value: V, ...: string): V? Checks if the value is of any of the types in the rest of the arguments. The meta-field __type will not have an effect. typed.int(value): int? Checks if the value is of type int. typed.float(value): float? Checks if the value is of type float. typed.bool(value): bool? Checks if the value is of type bool. typed.char(value): char? Checks if the value is of type char. typed.string(value): string? Checks if the value is of type string. typed.vector(value): vector? Checks if the value is of type vector. typed.object(value): object? Checks if the value is of type object. typed.object_raw(value): object? Checks if the value is of type object. The meta-field __type will not have an effect. typed.function(value): function? Checks if the value is of type fn. typed.numeric(value): int|float? Checks if the value is of type int or float. typed.iterable(value): string|vector|object? Checks if the value is of type string, vector or object. typed.options(value: V, ...): V? Checks if the value is equal to any of the values in the rest of the arguments. typed.some(value: V): V? Checks if the value is not null. Any usual falsy value except null of course return true .","title":"Typed"},{"location":"standard_modules/typed/#typed-module","text":"","title":"Typed Module"},{"location":"standard_modules/typed/#typedtypevalue-string","text":"Returns the type of value as a string. For objects it looks for the meta-field __type , but returns object as a default.","title":"typed.type(value): string"},{"location":"standard_modules/typed/#typedraw_typevalue-string","text":"Returns the type of value as a string, ignoring the objects meta-field __type .","title":"typed.raw_type(value): string"},{"location":"standard_modules/typed/#typedcheckvalue-v-string-v","text":"Checks if the value is of any of the types in the rest of the arguments.","title":"typed.check(value: V, ...: string): V?"},{"location":"standard_modules/typed/#typedcheck_rawvalue-v-string-v","text":"Checks if the value is of any of the types in the rest of the arguments. The meta-field __type will not have an effect.","title":"typed.check_raw(value: V, ...: string): V?"},{"location":"standard_modules/typed/#typedintvalue-int","text":"Checks if the value is of type int.","title":"typed.int(value): int?"},{"location":"standard_modules/typed/#typedfloatvalue-float","text":"Checks if the value is of type float.","title":"typed.float(value): float?"},{"location":"standard_modules/typed/#typedboolvalue-bool","text":"Checks if the value is of type bool.","title":"typed.bool(value): bool?"},{"location":"standard_modules/typed/#typedcharvalue-char","text":"Checks if the value is of type char.","title":"typed.char(value): char?"},{"location":"standard_modules/typed/#typedstringvalue-string","text":"Checks if the value is of type string.","title":"typed.string(value): string?"},{"location":"standard_modules/typed/#typedvectorvalue-vector","text":"Checks if the value is of type vector.","title":"typed.vector(value): vector?"},{"location":"standard_modules/typed/#typedobjectvalue-object","text":"Checks if the value is of type object.","title":"typed.object(value): object?"},{"location":"standard_modules/typed/#typedobject_rawvalue-object","text":"Checks if the value is of type object. The meta-field __type will not have an effect.","title":"typed.object_raw(value): object?"},{"location":"standard_modules/typed/#typedfunctionvalue-function","text":"Checks if the value is of type fn.","title":"typed.function(value): function?"},{"location":"standard_modules/typed/#typednumericvalue-intfloat","text":"Checks if the value is of type int or float.","title":"typed.numeric(value): int|float?"},{"location":"standard_modules/typed/#typediterablevalue-stringvectorobject","text":"Checks if the value is of type string, vector or object.","title":"typed.iterable(value): string|vector|object?"},{"location":"standard_modules/typed/#typedoptionsvalue-v-v","text":"Checks if the value is equal to any of the values in the rest of the arguments.","title":"typed.options(value: V, ...): V?"},{"location":"standard_modules/typed/#typedsomevalue-v-v","text":"Checks if the value is not null. Any usual falsy value except null of course return true .","title":"typed.some(value: V): V?"},{"location":"standard_modules/built_in_type_modules/file/","text":"File All the functions in this module can only be self-called on the file user-object, if that function expects a file user-object as the first argument. <file>.write(self: file, content: string) Writes to the file. <file>.read(self: file): string Returns the content of the file.","title":"File"},{"location":"standard_modules/built_in_type_modules/file/#file","text":"All the functions in this module can only be self-called on the file user-object, if that function expects a file user-object as the first argument.","title":"File"},{"location":"standard_modules/built_in_type_modules/file/#filewriteself-file-content-string","text":"Writes to the file.","title":"&lt;file&gt;.write(self: file, content: string)"},{"location":"standard_modules/built_in_type_modules/file/#filereadself-file-string","text":"Returns the content of the file.","title":"&lt;file&gt;.read(self: file): string"},{"location":"standard_modules/built_in_type_modules/iterator/","text":"Iterator All the functions in this module can only be self-called on the iterator user-object, if that function expects an iterator user-object as the first argument. <iterator>.next(iter: iterator<V>): V? Returns the next value in the iteration if any are left. <iterator>.any(iter: iterator<V>, cond: fn(v: V)): boolean Returns true if any value of iter makes the cond function return a truthy value. <iterator>.all(iter: iterator<V>, cond: fn(v: V)): boolean Returns true if all values of iter make the cond function return a truthy value. <iterator>.collect(iter: iterator<V>): vector<V> Returns a vector of all the values left in the iter iterator.","title":"Iterator"},{"location":"standard_modules/built_in_type_modules/iterator/#iterator","text":"All the functions in this module can only be self-called on the iterator user-object, if that function expects an iterator user-object as the first argument.","title":"Iterator"},{"location":"standard_modules/built_in_type_modules/iterator/#iteratornextiter-iteratorv-v","text":"Returns the next value in the iteration if any are left.","title":"&lt;iterator&gt;.next(iter: iterator&lt;V&gt;): V?"},{"location":"standard_modules/built_in_type_modules/iterator/#iteratoranyiter-iteratorv-cond-fnv-v-boolean","text":"Returns true if any value of iter makes the cond function return a truthy value.","title":"&lt;iterator&gt;.any(iter: iterator&lt;V&gt;, cond: fn(v: V)): boolean"},{"location":"standard_modules/built_in_type_modules/iterator/#iteratoralliter-iteratorv-cond-fnv-v-boolean","text":"Returns true if all values of iter make the cond function return a truthy value.","title":"&lt;iterator&gt;.all(iter: iterator&lt;V&gt;, cond: fn(v: V)): boolean"},{"location":"standard_modules/built_in_type_modules/iterator/#iteratorcollectiter-iteratorv-vectorv","text":"Returns a vector of all the values left in the iter iterator.","title":"&lt;iterator&gt;.collect(iter: iterator&lt;V&gt;): vector&lt;V&gt;"},{"location":"standard_modules/built_in_type_modules/stderr/","text":"Stderr All the functions in this module can only be self-called on the stderr user-object, if that function expects a stderr user-object as the first argument. <stderr>.write(self: stderr, content: string) Writes to the stderr buffer. <stderr>.flush(self: stderr) Flushes to the stderr buffer.","title":"Stderr"},{"location":"standard_modules/built_in_type_modules/stderr/#stderr","text":"All the functions in this module can only be self-called on the stderr user-object, if that function expects a stderr user-object as the first argument.","title":"Stderr"},{"location":"standard_modules/built_in_type_modules/stderr/#stderrwriteself-stderr-content-string","text":"Writes to the stderr buffer.","title":"&lt;stderr&gt;.write(self: stderr, content: string)"},{"location":"standard_modules/built_in_type_modules/stderr/#stderrflushself-stderr","text":"Flushes to the stderr buffer.","title":"&lt;stderr&gt;.flush(self: stderr)"},{"location":"standard_modules/built_in_type_modules/stdin/","text":"Stdin All the functions in this module can only be self-called on the stdin user-object, if that function expects a stdin user-object as the first argument. <stdin>.read(self: stdin): string? Returns the stdin buffer.","title":"Stdin"},{"location":"standard_modules/built_in_type_modules/stdin/#stdin","text":"All the functions in this module can only be self-called on the stdin user-object, if that function expects a stdin user-object as the first argument.","title":"Stdin"},{"location":"standard_modules/built_in_type_modules/stdin/#stdinreadself-stdin-string","text":"Returns the stdin buffer.","title":"&lt;stdin&gt;.read(self: stdin): string?"},{"location":"standard_modules/built_in_type_modules/stdout/","text":"Stdout All the functions in this module can only be self-called on the stdout user-object, if that function expects a stdout user-object as the first argument. <stdout>.write(self: stdout, content: string) Writes to the stdout buffer. <stdout>.flush(self: stdout) Flushes to the stdout buffer.","title":"Stdout"},{"location":"standard_modules/built_in_type_modules/stdout/#stdout","text":"All the functions in this module can only be self-called on the stdout user-object, if that function expects a stdout user-object as the first argument.","title":"Stdout"},{"location":"standard_modules/built_in_type_modules/stdout/#stdoutwriteself-stdout-content-string","text":"Writes to the stdout buffer.","title":"&lt;stdout&gt;.write(self: stdout, content: string)"},{"location":"standard_modules/built_in_type_modules/stdout/#stdoutflushself-stdout","text":"Flushes to the stdout buffer.","title":"&lt;stdout&gt;.flush(self: stdout)"},{"location":"standard_modules/built_in_type_modules/tcp_listener/","text":"TCP Listener All the functions in this module can only be self-called on the tcp-listener user-object, if that function expects a tcp-listener user-object as the first argument. <tcp-stream>.addr(self: tcp-stream): string? Returns the local address of the listener. <tcp-listener>.accept(self: tcp-listener): tcp-stream? Waits for the next incoming connection and returns the tcp-stream, if it doesn't time out.","title":"TCP Listener"},{"location":"standard_modules/built_in_type_modules/tcp_listener/#tcp-listener","text":"All the functions in this module can only be self-called on the tcp-listener user-object, if that function expects a tcp-listener user-object as the first argument.","title":"TCP Listener"},{"location":"standard_modules/built_in_type_modules/tcp_listener/#tcp-streamaddrself-tcp-stream-string","text":"Returns the local address of the listener.","title":"&lt;tcp-stream&gt;.addr(self: tcp-stream): string?"},{"location":"standard_modules/built_in_type_modules/tcp_listener/#tcp-listeneracceptself-tcp-listener-tcp-stream","text":"Waits for the next incoming connection and returns the tcp-stream, if it doesn't time out.","title":"&lt;tcp-listener&gt;.accept(self: tcp-listener): tcp-stream?"},{"location":"standard_modules/built_in_type_modules/tcp_stream/","text":"TCP Stream All the functions in this module can only be self-called on the tcp-stream user-object, if that function expects a tcp-stream user-object as the first argument. <tcp-stream>.local_addr(self: tcp-stream): string? Returns the local address of the stream. <tcp-stream>.peer_addr(self: tcp-stream): string? Returns the peer address of the stream. <tcp-stream>.read(self: tcp-stream): string? Reads from the stream if there is anything to read. <tcp-stream>.write(self: tcp-stream, msg: string): int Writes to the stream and returns the amount of bytes sent (0 if message failed to send). <tcp-stream>.flush(self: tcp-stream) Flushes the stream.","title":"TCP Stream"},{"location":"standard_modules/built_in_type_modules/tcp_stream/#tcp-stream","text":"All the functions in this module can only be self-called on the tcp-stream user-object, if that function expects a tcp-stream user-object as the first argument.","title":"TCP Stream"},{"location":"standard_modules/built_in_type_modules/tcp_stream/#tcp-streamlocal_addrself-tcp-stream-string","text":"Returns the local address of the stream.","title":"&lt;tcp-stream&gt;.local_addr(self: tcp-stream): string?"},{"location":"standard_modules/built_in_type_modules/tcp_stream/#tcp-streampeer_addrself-tcp-stream-string","text":"Returns the peer address of the stream.","title":"&lt;tcp-stream&gt;.peer_addr(self: tcp-stream): string?"},{"location":"standard_modules/built_in_type_modules/tcp_stream/#tcp-streamreadself-tcp-stream-string","text":"Reads from the stream if there is anything to read.","title":"&lt;tcp-stream&gt;.read(self: tcp-stream): string?"},{"location":"standard_modules/built_in_type_modules/tcp_stream/#tcp-streamwriteself-tcp-stream-msg-string-int","text":"Writes to the stream and returns the amount of bytes sent (0 if message failed to send).","title":"&lt;tcp-stream&gt;.write(self: tcp-stream, msg: string): int"},{"location":"standard_modules/built_in_type_modules/tcp_stream/#tcp-streamflushself-tcp-stream","text":"Flushes the stream.","title":"&lt;tcp-stream&gt;.flush(self: tcp-stream)"},{"location":"standard_modules/type_modules/bool_module/","text":"Bool Module All the functions in this module can be self-called on any boolean value, if that function expects a boolean as the first argument. bool.from(value): boolean Casts the value into a boolean.","title":"Bool Module"},{"location":"standard_modules/type_modules/bool_module/#bool-module","text":"All the functions in this module can be self-called on any boolean value, if that function expects a boolean as the first argument.","title":"Bool Module"},{"location":"standard_modules/type_modules/bool_module/#boolfromvalue-boolean","text":"Casts the value into a boolean.","title":"bool.from(value): boolean"},{"location":"standard_modules/type_modules/char_module/","text":"Char Module All the functions in this module can be self-called on any char value, if that function expects a char as the first argument. char.from(value): char? Casts the value into a char if it is possible. char.byte(value: char): int Casts the value char into it's byte version. char.is_whitespace(value: char): bool Checks if value char is a whitespace character. char.is_alphabetic(value: char): bool Checks if value char is a alphabetic character. char.is_alphanumeric(value: char): bool Checks if value char is a alphanumeric character. char.is_control(value: char): bool Checks if value char is a control character. char.is_digit(value: char): bool Checks if value char is a digit character. char.is_graphic(value: char): bool Checks if value char is a graphic character. char.is_hex(value: char): bool Checks if value char is a hexadecimal character. char.is_lower(value: char): bool Checks if value char is a lowercase character. char.is_upper(value: char): bool Checks if value char is an uppercase character.","title":"Char Module"},{"location":"standard_modules/type_modules/char_module/#char-module","text":"All the functions in this module can be self-called on any char value, if that function expects a char as the first argument.","title":"Char Module"},{"location":"standard_modules/type_modules/char_module/#charfromvalue-char","text":"Casts the value into a char if it is possible.","title":"char.from(value): char?"},{"location":"standard_modules/type_modules/char_module/#charbytevalue-char-int","text":"Casts the value char into it's byte version.","title":"char.byte(value: char): int"},{"location":"standard_modules/type_modules/char_module/#charis_whitespacevalue-char-bool","text":"Checks if value char is a whitespace character.","title":"char.is_whitespace(value: char): bool"},{"location":"standard_modules/type_modules/char_module/#charis_alphabeticvalue-char-bool","text":"Checks if value char is a alphabetic character.","title":"char.is_alphabetic(value: char): bool"},{"location":"standard_modules/type_modules/char_module/#charis_alphanumericvalue-char-bool","text":"Checks if value char is a alphanumeric character.","title":"char.is_alphanumeric(value: char): bool"},{"location":"standard_modules/type_modules/char_module/#charis_controlvalue-char-bool","text":"Checks if value char is a control character.","title":"char.is_control(value: char): bool"},{"location":"standard_modules/type_modules/char_module/#charis_digitvalue-char-bool","text":"Checks if value char is a digit character.","title":"char.is_digit(value: char): bool"},{"location":"standard_modules/type_modules/char_module/#charis_graphicvalue-char-bool","text":"Checks if value char is a graphic character.","title":"char.is_graphic(value: char): bool"},{"location":"standard_modules/type_modules/char_module/#charis_hexvalue-char-bool","text":"Checks if value char is a hexadecimal character.","title":"char.is_hex(value: char): bool"},{"location":"standard_modules/type_modules/char_module/#charis_lowervalue-char-bool","text":"Checks if value char is a lowercase character.","title":"char.is_lower(value: char): bool"},{"location":"standard_modules/type_modules/char_module/#charis_uppervalue-char-bool","text":"Checks if value char is an uppercase character.","title":"char.is_upper(value: char): bool"},{"location":"standard_modules/type_modules/float_module/","text":"Float Module All the functions in this module can be self-called on any float value, if that function expects a float as the first argument. float.from(value): float? Casts the value into a float if it is possible. float.floor(value: float): float Returns the floored float of value . float.ceil(value: float): float Returns the ceiled float of value . float.round(value: float): float Returns the rounded float of value .","title":"Float Module"},{"location":"standard_modules/type_modules/float_module/#float-module","text":"All the functions in this module can be self-called on any float value, if that function expects a float as the first argument.","title":"Float Module"},{"location":"standard_modules/type_modules/float_module/#floatfromvalue-float","text":"Casts the value into a float if it is possible.","title":"float.from(value): float?"},{"location":"standard_modules/type_modules/float_module/#floatfloorvalue-float-float","text":"Returns the floored float of value .","title":"float.floor(value: float): float"},{"location":"standard_modules/type_modules/float_module/#floatceilvalue-float-float","text":"Returns the ceiled float of value .","title":"float.ceil(value: float): float"},{"location":"standard_modules/type_modules/float_module/#floatroundvalue-float-float","text":"Returns the rounded float of value .","title":"float.round(value: float): float"},{"location":"standard_modules/type_modules/int_module/","text":"Int Module All the functions in this module can be self-called on any integer value, if that function expects an integer as the first argument. int.from(value): int? Casts the value into an integer if it is possible. int.from_bin(bin: string): int? Parses the bin string, expected to be a binary letters, to an integer if it is possible. int.from_hex(hex: string): int? Parses the hex string, expected to be a hexadecimal letters, to an integer if it is possible. int.bytes(value: int): vector<int> Converts the value integer to an array of bytes","title":"Int Module"},{"location":"standard_modules/type_modules/int_module/#int-module","text":"All the functions in this module can be self-called on any integer value, if that function expects an integer as the first argument.","title":"Int Module"},{"location":"standard_modules/type_modules/int_module/#intfromvalue-int","text":"Casts the value into an integer if it is possible.","title":"int.from(value): int?"},{"location":"standard_modules/type_modules/int_module/#intfrom_binbin-string-int","text":"Parses the bin string, expected to be a binary letters, to an integer if it is possible.","title":"int.from_bin(bin: string): int?"},{"location":"standard_modules/type_modules/int_module/#intfrom_hexhex-string-int","text":"Parses the hex string, expected to be a hexadecimal letters, to an integer if it is possible.","title":"int.from_hex(hex: string): int?"},{"location":"standard_modules/type_modules/int_module/#intbytesvalue-int-vectorint","text":"Converts the value integer to an array of bytes","title":"int.bytes(value: int): vector&lt;int&gt;"},{"location":"standard_modules/type_modules/object_module/","text":"Object Module object.len(o: object): int Returns the amount of the objects fields. object.keys(o: object): iterator<string> Returns an iterator over all the fields of o . object.values(o: object<V>): iterator<V> Returns an iterator over all the values of o . object.setmeta(o: object<V>|fn, meta: object?): object<V>|fn Sets the meta-object of o to meta object.getmeta(o: object|fn): object? Returns the meta-object of o if it has any. object.clear(o: object) Clears o of it's values. object.box(v): box Returns the value v wrapped around a box. The box holds the inner value to be passed around by reference, without copying the inner value. This allows multiple variables to reference the same value. To read the inner value write box.value . To change the inner value write box.value = new_value . object.int(v: int): int-box Returns the value v wrapped around a box that can only hold an integer. object.float(v: float): float-box Returns the value v wrapped around a box that can only hold an float. object.bool(v: boolean): boolean-box Returns the value v wrapped around a box that can only hold an boolean. object.char(v: char): char-box Returns the value v wrapped around a box that can only hold an character. object.string(v: string): string-box Returns the value v wrapped around a box that can only hold an string.","title":"Object Module"},{"location":"standard_modules/type_modules/object_module/#object-module","text":"","title":"Object Module"},{"location":"standard_modules/type_modules/object_module/#objectleno-object-int","text":"Returns the amount of the objects fields.","title":"object.len(o: object): int"},{"location":"standard_modules/type_modules/object_module/#objectkeyso-object-iteratorstring","text":"Returns an iterator over all the fields of o .","title":"object.keys(o: object): iterator&lt;string&gt;"},{"location":"standard_modules/type_modules/object_module/#objectvalueso-objectv-iteratorv","text":"Returns an iterator over all the values of o .","title":"object.values(o: object&lt;V&gt;): iterator&lt;V&gt;"},{"location":"standard_modules/type_modules/object_module/#objectsetmetao-objectvfn-meta-object-objectvfn","text":"Sets the meta-object of o to meta","title":"object.setmeta(o: object&lt;V&gt;|fn, meta: object?): object&lt;V&gt;|fn"},{"location":"standard_modules/type_modules/object_module/#objectgetmetao-objectfn-object","text":"Returns the meta-object of o if it has any.","title":"object.getmeta(o: object|fn): object?"},{"location":"standard_modules/type_modules/object_module/#objectclearo-object","text":"Clears o of it's values.","title":"object.clear(o: object)"},{"location":"standard_modules/type_modules/object_module/#objectboxv-box","text":"Returns the value v wrapped around a box. The box holds the inner value to be passed around by reference, without copying the inner value. This allows multiple variables to reference the same value. To read the inner value write box.value . To change the inner value write box.value = new_value .","title":"object.box(v): box"},{"location":"standard_modules/type_modules/object_module/#objectintv-int-int-box","text":"Returns the value v wrapped around a box that can only hold an integer.","title":"object.int(v: int): int-box"},{"location":"standard_modules/type_modules/object_module/#objectfloatv-float-float-box","text":"Returns the value v wrapped around a box that can only hold an float.","title":"object.float(v: float): float-box"},{"location":"standard_modules/type_modules/object_module/#objectboolv-boolean-boolean-box","text":"Returns the value v wrapped around a box that can only hold an boolean.","title":"object.bool(v: boolean): boolean-box"},{"location":"standard_modules/type_modules/object_module/#objectcharv-char-char-box","text":"Returns the value v wrapped around a box that can only hold an character.","title":"object.char(v: char): char-box"},{"location":"standard_modules/type_modules/object_module/#objectstringv-string-string-box","text":"Returns the value v wrapped around a box that can only hold an string.","title":"object.string(v: string): string-box"},{"location":"standard_modules/type_modules/string_module/","text":"String Module All the functions in this module can be self-called on any string value, if that function expects a string as the first argument. string.lowercase: vector<char> An array of all lowercase letters. string.uppercase: vector<char> An array of all uppercase letters. string.letters: vector<char> An array of all alphabetic letters. string.from(...): string Joins all the arguments together into a string. string.len(s: string): int Returns the length of the s string. string.iter(s: string): iterator<char> Returns an iterator over the chars in the s string. string.get(s: string, index: int, default: char?): char? Returns the char at the index of the s string. Defaults to the default char if given. string.sub(s: string, i: int, j: int?, default: string?): string? Returns the sub-string of s from index i to j . If j is not given, it is the length of the string. If the indexes are out of range, default will be returned. string.split(s: string, sep: string): vector<string> Returns a vector of the string s split by sep . string.split_amount(s: string, n: int, sep: string): vector<string> Returns a vector of the string s split by sep , but only n amount of times. string.split_at(s: string, idx: int): vector<string> Returns a vector of the string s split at the index idx . string.split_off(s: string, idx: int): string Returns a the string s from index idx to the end of the string. string.rep(s: string, n: int): string Returns a repetition of the s string by n . string.rev(s: string): string Returns the reverse of s . string.find(s: string, patt: string): string Returns the starting position of the patt sub-string in s . string.format(s: string, ...): string Returns the formatted version of s with the rest of the arguments. %s : next argument as a string %q : next argument quoted if it is a string %x : next argument as a hexadecimal integer if it is a integer %% : just %","title":"String Module"},{"location":"standard_modules/type_modules/string_module/#string-module","text":"All the functions in this module can be self-called on any string value, if that function expects a string as the first argument.","title":"String Module"},{"location":"standard_modules/type_modules/string_module/#stringlowercase-vectorchar","text":"An array of all lowercase letters.","title":"string.lowercase: vector&lt;char&gt;"},{"location":"standard_modules/type_modules/string_module/#stringuppercase-vectorchar","text":"An array of all uppercase letters.","title":"string.uppercase: vector&lt;char&gt;"},{"location":"standard_modules/type_modules/string_module/#stringletters-vectorchar","text":"An array of all alphabetic letters.","title":"string.letters: vector&lt;char&gt;"},{"location":"standard_modules/type_modules/string_module/#stringfrom-string","text":"Joins all the arguments together into a string.","title":"string.from(...): string"},{"location":"standard_modules/type_modules/string_module/#stringlens-string-int","text":"Returns the length of the s string.","title":"string.len(s: string): int"},{"location":"standard_modules/type_modules/string_module/#stringiters-string-iteratorchar","text":"Returns an iterator over the chars in the s string.","title":"string.iter(s: string): iterator&lt;char&gt;"},{"location":"standard_modules/type_modules/string_module/#stringgets-string-index-int-default-char-char","text":"Returns the char at the index of the s string. Defaults to the default char if given.","title":"string.get(s: string, index: int, default: char?): char?"},{"location":"standard_modules/type_modules/string_module/#stringsubs-string-i-int-j-int-default-string-string","text":"Returns the sub-string of s from index i to j . If j is not given, it is the length of the string. If the indexes are out of range, default will be returned.","title":"string.sub(s: string, i: int, j: int?, default: string?): string?"},{"location":"standard_modules/type_modules/string_module/#stringsplits-string-sep-string-vectorstring","text":"Returns a vector of the string s split by sep .","title":"string.split(s: string, sep: string): vector&lt;string&gt;"},{"location":"standard_modules/type_modules/string_module/#stringsplit_amounts-string-n-int-sep-string-vectorstring","text":"Returns a vector of the string s split by sep , but only n amount of times.","title":"string.split_amount(s: string, n: int, sep: string): vector&lt;string&gt;"},{"location":"standard_modules/type_modules/string_module/#stringsplit_ats-string-idx-int-vectorstring","text":"Returns a vector of the string s split at the index idx .","title":"string.split_at(s: string, idx: int): vector&lt;string&gt;"},{"location":"standard_modules/type_modules/string_module/#stringsplit_offs-string-idx-int-string","text":"Returns a the string s from index idx to the end of the string.","title":"string.split_off(s: string, idx: int): string"},{"location":"standard_modules/type_modules/string_module/#stringreps-string-n-int-string","text":"Returns a repetition of the s string by n .","title":"string.rep(s: string, n: int): string"},{"location":"standard_modules/type_modules/string_module/#stringrevs-string-string","text":"Returns the reverse of s .","title":"string.rev(s: string): string"},{"location":"standard_modules/type_modules/string_module/#stringfinds-string-patt-string-string","text":"Returns the starting position of the patt sub-string in s .","title":"string.find(s: string, patt: string): string"},{"location":"standard_modules/type_modules/string_module/#stringformats-string-string","text":"Returns the formatted version of s with the rest of the arguments. %s : next argument as a string %q : next argument quoted if it is a string %x : next argument as a hexadecimal integer if it is a integer %% : just %","title":"string.format(s: string, ...): string"},{"location":"standard_modules/type_modules/vector_module/","text":"Vector Module All the functions in this module can be self-called on any vector value, if that function expects a vector as the first argument. vector.iter(v: vector<T>): iterator<T> Returns an iterator over the elements of v . vector.len(v: vector): int Returns the length of v . vector.get(v: vector, index: int, default?) Returns the value of v at index index . If the index is out of range, default is returned vector.contains(v: vector, value): bool Checks if the value is contained in v . vector.position(value): int? Returns the index of the element in the vector that equal value , if there is any. vector.push(v: vector, value) Pushes the value onto v . vector.pop(v: vector<T>, index: int?): T? Pops value at index off of v and returns it. If index is not given, the last value in v will be popped. vector.join(v: vector, sep: string): string Returns a string of all the values in v as strings seperated by sep . vector.swap(v: vector, i1: int, i1: int) Swaps the index i1 with index i2 of v if they are in bounds. vector.copy(v: vector<T>): vector<T> Returns a shallow copy of v . vector.clear(v: vector) Clears v of it's values.","title":"Vector Module"},{"location":"standard_modules/type_modules/vector_module/#vector-module","text":"All the functions in this module can be self-called on any vector value, if that function expects a vector as the first argument.","title":"Vector Module"},{"location":"standard_modules/type_modules/vector_module/#vectoriterv-vectort-iteratort","text":"Returns an iterator over the elements of v .","title":"vector.iter(v: vector&lt;T&gt;): iterator&lt;T&gt;"},{"location":"standard_modules/type_modules/vector_module/#vectorlenv-vector-int","text":"Returns the length of v .","title":"vector.len(v: vector): int"},{"location":"standard_modules/type_modules/vector_module/#vectorgetv-vector-index-int-default","text":"Returns the value of v at index index . If the index is out of range, default is returned","title":"vector.get(v: vector, index: int, default?)"},{"location":"standard_modules/type_modules/vector_module/#vectorcontainsv-vector-value-bool","text":"Checks if the value is contained in v .","title":"vector.contains(v: vector, value): bool"},{"location":"standard_modules/type_modules/vector_module/#vectorpositionvalue-int","text":"Returns the index of the element in the vector that equal value , if there is any.","title":"vector.position(value): int?"},{"location":"standard_modules/type_modules/vector_module/#vectorpushv-vector-value","text":"Pushes the value onto v .","title":"vector.push(v: vector, value)"},{"location":"standard_modules/type_modules/vector_module/#vectorpopv-vectort-index-int-t","text":"Pops value at index off of v and returns it. If index is not given, the last value in v will be popped.","title":"vector.pop(v: vector&lt;T&gt;, index: int?): T?"},{"location":"standard_modules/type_modules/vector_module/#vectorjoinv-vector-sep-string-string","text":"Returns a string of all the values in v as strings seperated by sep .","title":"vector.join(v: vector, sep: string): string"},{"location":"standard_modules/type_modules/vector_module/#vectorswapv-vector-i1-int-i1-int","text":"Swaps the index i1 with index i2 of v if they are in bounds.","title":"vector.swap(v: vector, i1: int, i1: int)"},{"location":"standard_modules/type_modules/vector_module/#vectorcopyv-vectort-vectort","text":"Returns a shallow copy of v .","title":"vector.copy(v: vector&lt;T&gt;): vector&lt;T&gt;"},{"location":"standard_modules/type_modules/vector_module/#vectorclearv-vector","text":"Clears v of it's values.","title":"vector.clear(v: vector)"}]}